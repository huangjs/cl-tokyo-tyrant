\input texinfo  @c -*-texinfo-*-
@comment %**start of header
@setfilename index.info
@settitle cl-tokyo-tyrant リファレンスマニュアル
@syncodeindex fn cp
@syncodeindex vr cp
@comment %**end of header


@documentencoding euc-jp

@iftex
@finalout
@parskip 4pt plus 1pt
@end iftex

@titlepage
@title cl-tokyo-tyrant リファレンスマニュアル
@subtitle
@author 源馬 照明

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2010 Neophilia, Inc.

@end titlepage

@node Top, , (dir), (dir)

@chapter はじめに
@section tokyo-cabinet とは
@uref{http://fallabs.com/tokyocabinet/spex-ja.html, Tokyo Cabinet 第1版基本仕様書}
より引用
@quotation
Tokyo Cabinetはデータベースを扱うルーチン群のライブラリです。データベースといっても単純なもので、キーと値のペアからなるレコード群を格納したデータファイルです。キーと値は任意の長さを持つ一連のバイト列であり、文字列でもバイナリでも扱うことができます。テーブルやデータ型の概念はありません。レコードはハッシュ表かB+木か固定長配列で編成されます。

ハッシュ表のデータベースでは、キーはデータベース内で一意であり、キーが重複する複数のレコードを格納することはできません。このデータベースに対しては、キーと値を指定してレコードを格納したり、キーを指定して対応するレコードを削除したり、キーを指定して対応するレコードを検索したりすることができます。また、データベースに格納してある全てのキーを順不同に一つずつ取り出すこともできます。このような操作は、UNIX標準で定義されている DBMライブラリおよびその追従であるNDBMやGDBMに類するものです。Tokyo CabinetはDBMのより良い代替として利用することができます。

B+木のデータベースでは、キーが重複する複数のレコードを格納することができます。このデータベースに対しては、ハッシュ表のデータベースと同様に、キーを指定してレコードを格納したり取り出したり削除したりすることができます。レコードはユーザが指示した比較関数に基づいて整列されて格納されます。カーソルを用いて各レコードを昇順または降順で参照することができます。この機構によって、文字列の前方一致検索や数値の範囲検索が可能になります。

固定長配列のデータベースでは、一意な自然数をキーとしてレコードが格納されます。キーが重複する複数のレコードを格納することはできません。また、各レコードの値の長さは一定以下に制限されます。提供される操作はハッシュデータベースとほぼ同様です。

ハッシュ表のデータベース変種として、テーブルのデータベースも提供されます。各レコードは主キーで識別されるとともに、名前付きコラムの集合を値として持ちます。データスキーマの概念はありませんが、任意のコラムに張られたインデックスを用いることで複雑な条件に基づくレコードの検索を効率化することができます。

Tokyo CabinetはC言語で記述され、CとPerlとRubyとJavaとLuaのAPIとして提供されます。Tokyo CabinetはC99およびPOSIX準拠のAPIを備えるプラットフォームで利用できます。Tokyo CabinetはGNU Lesser General Public Licenseに基づくフリーソフトウェアです。
@end quotation

@section tokyo-tyrant とは
@uref{http://fallabs.com/tokyotyrant/spex.html,Fundamental Specifications of Tokyo Tyrant Version 1}
より引用
@quotation
Tokyo Tyrant is a package of network interface to the DBM called Tokyo Cabinet. Though the DBM has high performance, you might bother in case that multiple processes share the same database, or remote processes access the database. Thus, Tokyo Tyrant is provided for concurrent and remote connections to Tokyo Cabinet. It is composed of the server process managing a database and its access library for client applications.

The server features high concurrency due to thread-pool modeled implementation and the epoll/kqueue mechanism of the modern Linux/*BSD kernel. The server and its clients communicate with each other by simple binary protocol on TCP/IP. Protocols compatible with memcached and HTTP are also supported so that almost all principal platforms and programming languages can use Tokyo Tyrant. High availability and high integrity are also featured due to such mechanisms as hot backup, update logging, and replication. The server can embed Lua, a lightweight script language so that you can define arbitrary operations of the database.

Because the server uses the abstract API of Tokyo Cabinet, all of the six APIs: the on-memory hash database API, the on-memory tree database API, the hash API, the B+ tree database API, the fixed-length database API, and the table database API, are available from the client with the common interface. Moreover, the table extension is provided to use specific features of the table database.

As for now, the server works on Linux, FreeBSD, Mac OS X, Solaris only.
@end quotation

Tokyo Tyrant は以下の通信プロトコルを用意している。
@itemize @bullet
@item
バイナリプロトコル
@item
memcached プロトコル
@item
HTTP プロトコル
@end itemize

@subsection バイナリプロトコル
バイナリプロトコル では、 Tokyo Tyrant 専用のプロトコルで、最も詳細に Tokyo Cabinet を操作できる。

以下は バイナリプロトコル で操作可能なコマンドの一覧である。
cl-tokyo-tyrant は全て対応している。
@example
put putkeep putcat putshl putnr out get mget vsiz iterinit iternext
fwmkeys addint adddouble ext sync optimize vanish copy restore
setmst rnum size stat misc
@end example

参考として、仕様書の一部を引用しておく。

@quotation
Original Binary Protocol

In the original binary protocol, requests are classified into the following commands. Structure of request and response is determined by the command. The byte order of integer in request and response is big endian.

@smallexample
put: for the function `tcrdbput'

    Request: [magic:2][ksiz:4][vsiz:4][kbuf:*][vbuf:*]
        Two bytes of the command ID: 0xC8 and 0x10
        A 32-bit integer standing for the length of the key
        A 32-bit integer standing for the length of the value
        Arbitrary data of the key
        Arbitrary data of the value
    Response: [code:1]
        An 8-bit integer whose value is 0 on success or another on failure 
@end smallexample
@smallexample
putkeep: for the function `tcrdbputkeep'

    Request: [magic:2][ksiz:4][vsiz:4][kbuf:*][vbuf:*]
        Two bytes of the command ID: 0xC8 and 0x11
        A 32-bit integer standing for the length of the key
        A 32-bit integer standing for the length of the value
        Arbitrary data of the key
        Arbitrary data of the value
    Response: [code:1]
        An 8-bit integer whose value is 0 on success or another on failure 
@end smallexample
@end quotation

@subsection memcached 互換プロトコル

memcached 互換プロトコル では、 世界的に有名な Key Value Store である memcached に準拠したプロトコルで、
基本的に Tokyo Cabinet を操作できる。

以下は memcached プロトコル で操作可能なコマンドの一覧である。

@uref{http://common-lisp.net/project/cl-memcached/,cl-memcached} というライブラリで利用できるだろう。

@example
set add replace get delete incr decr stats flush_all version quit
@end example

参考として、仕様書の一部を引用しておく。

@quotation
Memcached Compatible Protocol

As for the memcached (ASCII) compatible protocol, the server implements the following commands; "set", "add", "replace", "get", "delete", "incr", "decr", "stats", "flush_all", "version", and "quit". "noreply" options of update commands are also supported. However, "flags", "exptime", and "cas unique" parameters are ignored.
@end quotation

@subsection HTTP 互換プロトコル
HTTP 互換プロトコル では、 ごくありふれた HTTP で、 気軽に Tokyo Cabinet を操作できる。

参考として、仕様書の一部を引用しておく。
@quotation
HTTP Compatible Protocol
As for the HTTP (1.1) compatible protocol, the server implements the following commands; "GET" (relevant to @code{tcrdbget}), "HEAD" (relevant to @code{tcrdbvsiz}), "PUT" (relevant to @code{tcrdbput}), "POST" (relevant to @code{tcrdbext}), "DELETE" (relevant to @code{tcrdbout}), and "OPTIONS" (relevant to @code{tcrdbstat}). The URI of each request is treated as the key encoded by the URL encoding. And the entity body is treated as the value. However, headers except for "Connection" and "Content-Length" are ignored. "PUT" can have the header "X-TT-PDMODE" whose value is either of 1 (relevant to @code{tcrdbputkeep}), 2 (relevant to @code{tcrdbputcat}), or else (relevant to @code{tcrdbput}).
@end quotation

@section cl-tokyo-tyrant とは
cl-tokyo-tyrant とは、 Allegro Common Lisp で記述された、 Tokyo Tyrant の バイナリプロトコルクライアントのライブラリである。

cl-tokyo-tyrant を用いることで、 ACL から、 スレッド や ソケット を意識せずに、 複数のプロセスから共通の Tokyo Cabinet に効率よくアクセスしたり、 リモートマシン上の Tokyo Cabinet にアクセスしたりできる。

@subsection 依存するソフトウェア、ライブラリ
@itemize @bullet
@item
Tokyo Tyrant version 1.1.41 以上
@item
Allegro Common Lisp version 8.2 以上
@item
ACL 付属 regexp2 モジュール
@item
ACL 付属 acl-socket パッケージ
@item
ACL 付属 util.string パッケージ
@end itemize

@chapter リファレンスマニュアル

@section :tokyo-tyrant パッケージ
@deftp {Package} :tokyo-tyrant
@cindex :tokyo-tyrant
Tokyo Tyrant の バイナリプロトコルクライアント 機能を提供するパッケージである。
@end deftp

@section RDB クラス

@deftp {Class} RDB
@cindex RDB
Tokyo Tyrant サーバとの接続状態をカプセル化するクラスである。

@example
(defvar  tt (make-instance 'RDB))
(tt-open tt "localhost" 1978)
(tt-put  tt "foo" "bar")
(tt-get  tt "foo")
@dots{}
(tt-close tt)
@end example
@end deftp

@defun tt-errmsg (rdb &optional (ecode nil))
Get the message string corresponding to an error code.

@var{ecode} specifies the error code.  If it is not defined or negative, the last happened error code is specified.

The return value is the message string of the error code.
@end defun

@defun tt-open (rdb host &optional (port 0) (timeout 0))
Open a remote database connection.

@var{host} specifies the name or the address of the server.

@var{port} specifies the port number.  If it is not defined or not more than 0, UNIX domain socket is used and the path of the socket file is specified by the host parameter.

@var{timeout} specifies the timeout of each query in seconds.  If it is not defined or not more than 0, the timeout is not specified.

If successful, the return value is true, else, it is false.
@end defun

@defun tt-close (rdb)
Close the database connection.

If successful, the return value is true, else, it is false.
@end defun

@defun tt-put (rdb key value)
Store a record.

   @var{key} specifies the key.

   @var{value} specifies the value.

   If successful, the return value is true, else, it is false.

   If a record with the same key exists in the database, it is overwritten.
@end defun

@defun tt-putkeep (rdb key value)
   Store a new record.

   @var{key} specifies the key.

   @var{value} specifies the value.

   If successful, the return value is true, else, it is false.

   If a record with the same key exists in the database, this method has no effect.
@end defun

@defun tt-putcat (rdb key value)
   Concatenate a value at the end of the existing record.

   @var{key} specifies the key.

   @var{value} specifies the value.

   If successful, the return value is true, else, it is false.

   If there is no corresponding record, a new record is created.
@end defun

@defun tt-putshl (rdb key value &optional (width 0))
   Concatenate a value at the end of the existing record and shift it to the left.

   @var{key} specifies the key.

   @var{value} specifies the value.

   @var{width} specifies the width of the record.

   If successful, the return value is true, else, it is false.

   If there is no corresponding record, a new record is created.
@end defun

@defun tt-putnr (rdb key value)
   Store a record without response from the server.

   @var{key} specifies the key.

   @var{value} specifies the value.

   If successful, the return value is true, else, it is false.

   If a record with the same key exists in the database, it is overwritten.
@end defun

@defun tt-out (rdb key)
   Remove a record.

   @var{key} specifies the key.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-get (rdb key)
   Retrieve a record.

   @var{key} specifies the key.

   If successful, the return value is the value of the corresponding record.  @code{nil} is returned if no record corresponds.
@end defun

@defun tt-mget (rdb recs)
   Retrieve records.

   @var{recs} specifies a hash containing the retrieval keys.  As a result of this method, keys existing in the database have the corresponding values and keys not existing in the database are removed.

   If successful, the return value is the number of retrieved records or nil on failure.
@end defun

@defun tt-vsiz (rdb key)
   Get the size of the value of a record.

   @var{key} specifies the key.

   If successful, the return value is the size of the value of the corresponding record, else, it is nil.
@end defun

@defun tt-iterinit (rdb)
   Initialize the iterator.

   If successful, the return value is true, else, it is false.

   The iterator is used in order to access the key of every record stored in a database.
@end defun

@defun tt-iternext (rdb)
   Get the next key of the iterator.

   If successful, the return value is the next key, else, it is @code{nil}.  @code{nil} is returned when no record is to be get out of the iterator.

   It is possible to access every record by iteration of calling this method.  It is allowed to update or remove records whose keys are fetched while the iteration.  However, it is not assured if updating the database is occurred while the iteration.  Besides, the order of this traversal access method is arbitrary, so it is not assured that the order of storing matches the one of the traversal access.
@end defun

@defun tt-fwmkeys (rdb prefix &optional (max -1))
   Get forward matching keys.

   @var{prefix} specifies the prefix of the corresponding keys.

   @var{max} specifies the maximum number of keys to be fetched.  If it is not defined or negative, no limit is specified.

   The return value is an array of the keys of the corresponding records.  This method does never fail.  It returns an empty array even if no record corresponds.

   Note that this method may be very slow because every key in the database is scanned.
@end defun

@defun tt-addint (rdb key &optional (num 0))
   Add an integer to a record.

   @var{key} specifies the key.

   @var{num} specifies the additional value.  If it is not defined, 0 is specified.

   If successful, the return value is the summation value, else, it is @code{nil}.

   If the corresponding record exists, the value is treated as an integer and is added to.  If no record corresponds, a new record of the additional value is stored.  Because records are stored in binary format, they should be processed with the @code{unpack} function with the @code{i} operator after retrieval.
@end defun

@defun tt-adddouble (rdb key &optional (num 0))
   Add a real number to a record.

   @var{key} specifies the key.

   @var{num} specifies the additional value.  If it is not defined, 0 is specified.

   If successful, the return value is the summation value, else, it is @code{nil}.

   If the corresponding record exists, the value is treated as a real number and is added to.  If no record corresponds, a new record of the additional value is stored.  Because records are stored in binary format, they should be processed with the @code{unpack} function with the @code{d} operator after retrieval.
@end defun

@defun tt-ext (rdb name &optional (key "") (value "") (opts 0))
   Call a function of the script language extension.

   @var{name} specifies the function name.

   @var{key} specifies the key.  If it is not defined, an empty string is specified.

   @var{value} specifies the value.  If it is not defined, an empty string is specified.

   @var{opts} specifies options by bitwise-or: @var{*XOLCKREC*} for record locking, @var{*XOLCKGLB*} for global locking.  If it is not defined, no option is specified.

   If successful, the return value is the value of the response or @code{nil} on failure.
@end defun

@defun tt-sync (rdb)
   Synchronize updated contents with the file and the device.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-optimize (rdb &optional (params ""))
   Optimize the storage.

   @var{params} specifies the string of the tuning parameters.  If it is not defined, it is not used.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-vanish (rdb)
   Remove all records.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-copy (rdb path)
   Copy the database file.
   @var{path} specifies the path of the destination file.  If it begins with @code{@@}, the trailing substring is executed as a command line.

   If successful, the return value is true, else, it is false.  False is returned if the executed command returns non-zero code.

   The database file is assured to be kept synchronized and not modified while the copying or executing operation is in progress.  So, this method is useful to create a backup file of the database file.
@end defun

@defun tt-rnum (rdb)
   Get the number of records.

   The return value is the number of records or 0 if the object does not connect to any database server.
@end defun

@defun tt-size (rdb)
   Get the size of the database.

   The return value is the size of the database or 0 if the object does not connect to any database server.
@end defun

@defun tt-stat (rdb)
   Get the status string of the database server.

   The return value is the status message of the database or @code{nil} if the object does not connect to any database server.  The message format is TSV.  The first field of each line means the parameter name and the second field means the value.

@end defun

@defun tt-misc (rdb name &optional (args nil) (opts 0))
   Call a versatile function for miscellaneous operations.

   @var{name} specifies the name of the function.  All databases support 'putlist', 'outlist', and 'getlist'.  'putlist' is to store records.  It receives keys and values one after the other, and returns an empty list.  'outlist' is to remove records.  It receives keys, and returns an empty array.  'getlist' is to retrieve records.  It receives keys, and returns keys and values of corresponding records one after the other.  Table database supports 'setindex', 'search', and 'genuid'.

   @var{args} specifies an array containing arguments.  If it is not defined, no argument is specified.

   @var{opts} specifies options by bitwise-or: @var{*MONOULOG*} for omission of the update log.  If it is not defined, no option is specified.


   if successful, and the result is empty,     the return value is t,

   if successful, and the result is not empty, the return value is an array of the result,

   @code{nil} is returned on failure.
@end defun

@defun tt-store (rdb key value)
   Hash-compatible method.

   Alias of @code{tt-put}.
@end defun

@defun tt-delete (rdb key)
   Hash-compatible method.

   Alias of @code{tt-out}.
@end defun

@defun tt-fetch (rdb key)
   Hash-compatible method.

   Alias of @code{tt-get}.
@end defun

@defun tt-has-keyp (rdb key)
   Hash-compatible method.

   Check existence of a @var{key}.
@end defun

@defun tt-has-valuep (rdb value)
   Hash-compatible method.

   Check existence of a @var{value}.
@end defun

@defun tt-clear (rdb)
   Hash-compatible method.

   Alias of @code{tt-vanish}.
@end defun

@defun tt-length (rdb)
   Hash-compatible method.

   Alias of @code{tt-rnum}.
@end defun

@defun tt-emptyp (rdb)
   Hash-compatible method.

   Alias of @code{tt-rnum} < 1.
@end defun

@defun tt-each (rdb proc)
   Hash-compatible method.

   Iterator of pairs of the key and the value.
@end defun

@defun tt-each-keys (rdb proc)
   Hash-compatible method.

   Iterator of the keys.
@end defun

@defun tt-each-values (rdb proc)
   Hash-compatible method.

   Iterator of the values.
@end defun

@defun tt-keys (rdb)
   Hash-compatible method.

   Get an array of all keys.
@end defun

@defun tt-values (rdb)
   Hash-compatible method.

   Get an array of all keys.
@end defun

@subsection RDB クラス の 定数

@defvr {Error Code} *ESUCCESS*
0 "success"
@end defvr

@defvr {Error Code} *EINVALID*
1 "invalid operation"
@end defvr

@defvr {Error Code} *ENOHOST*
2 "host not found"
@end defvr

@defvr {Error Code} *EREFUSED*
3 "connection refused"
@end defvr

@defvr {Error Code} *ESEND*
4 "send error"
@end defvr

@defvr {Error Code} *ERECV*
5 "recv error"
@end defvr

@defvr {Error Code} *EKEEP*
6 "existing record"
@end defvr

@defvr {Error Code} *ENOREC*
7 "no record found"
@end defvr

@defvr {Error Code} *EMISC*
9999 "miscellaneous error"
@end defvr

@defvr {scripting extension option} *XOLCKREC*
1 "record locking"
@end defvr

@defvr {scripting extension option} *XOLCKGLB*
2 "global locking"
@end defvr

@defvr {versatile function option} *MONOULOG*
1 "omission of the update log"
@end defvr

@section RDBTBL クラス

@deftp {Class} RDBTBL
@cindex RDBTBL
This class inherits the class @var{RDB}.

All methods are specific to servers of the table database.

@example
(defun alist-to-hash-table (alist &key ((:test test) 'eql))
  "((key0 . value0) (key1 . value1)) -> @{key0: value0, key1: value1@}"
  (let ((table (make-hash-table :test test)))
    (dolist (p alist)
      (setf (gethash (car p) table) (cdr p)))
    table))

(defvar tt (make-instance 'RDBTBL))
(tt-open tt "localhost" 1978)
(tt-put  tt "foo" (alist-to-hash-table '(("name"  . "空条徐倫")
                                         ("sex"   . "female")
                                         ("hdate" . "20070523")
                                         ("div"   . "brd,hr"))
                                       :test 'equal))
(tt-get  tt "foo")
@dots{}
(tt-close tt)
@end example
@end deftp

@defun tt-put (rdbtbl pkey cols)
   Store a record.

   @var{pkey} specifies the primary key.

   @var{cols} specifies a hash containing columns.

   If successful, the return value is true, else, it is false.

   If a record with the same key exists in the database, it is overwritten.
@end defun

@defun tt-putkeep (rdbtbl pkey cols)
   Store a new record.

   @var{pkey} specifies the primary key.

   @var{cols} specifies a hash containing columns.

   If successful, the return value is true, else, it is false.

   If a record with the same key exists in the database, this method has no effect.
@end defun

@defun tt-putcat (rdbtbl pkey cols)
   Concatenate columns of the existing record.

   @var{pkey} specifies the primary key.

   @var{cols} specifies a hash containing columns.

   If successful, the return value is true, else, it is false.

   If there is no corresponding record, a new record is created.
@end defun

@defun tt-out  (rdbtbl pkey)
   Remove a record.

   @var{pkey} specifies the primary key.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-get (rdbtbl pkey)
   Retrieve a record.

   @var{pkey} specifies the primary key.

   If successful, the return value is a hash of the columns of the corresponding record.  @code{nil} is returned if no record corresponds.
@end defun

@defun tt-mget (rdbtbl recs)
   Retrieve records.

   @var{recs} specifies a hash containing the retrieval keys.  As a result of this method, keys existing in the database have the corresponding columns and keys not existing in the database are removed.

   If successful, the return value is the number of retrieved records or -1 on failure.

   Due to the protocol restriction, this method can not handle records with binary columns including the '\0' chracter.
@end defun

@defun tt-setindex (rdbtbl name type)
   Set a column index.

   @var{name} specifies the name of a column.  If the name of an existing index is specified, the index is rebuilt.  An empty string means the primary key.

   @var{type} specifies the index type: @var{*ITLEXICAL*} for lexical string, @var{*ITDECIMAL*} for decimal string, @var{*ITTOKEN*} for token inverted index, @var{*ITQGRAM*} for q-gram inverted index.  If it is @var{*ITOPT*}, the index is optimized.  If it is @var{*ITVOID*}, the index is removed.  If @var{*ITKEEP*} is added by bitwise-or and the index exists, this method merely returns failure.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-genuid (rdbtbl)
   Generate a unique ID number.

   The return value is the new unique ID number or -1 on failure.
@end defun

@subsection RDBTBL クラス の 定数

@defvr {index type} *ITLEXICAL*
       0 "lexical string"
@end defvr

@defvr {index type} *ITDECIMAL*
       1 "decimal string"
@end defvr

@defvr {index type} *ITTOKEN*
       2 "token inverted index"
@end defvr

@defvr {index type} *ITQGRAM*
         3 "q-gram inverted index"
@end defvr

@defvr {index type} *ITOPT*
        9998 "optimize"
@end defvr

@defvr {index type} *ITVOID*
       9999 "void"
@end defvr

@defvr {index type} *ITKEEP*
 (ash 1 24) "keep existing index"
@end defvr

@section RDBQRY クラス

@deftp {Class} RDBQRY
@cindex RDBQRY
This class is a helper for the class @var{RDBTBL}.

以下は、@uref{http://alpha.mixi.co.jp/blog/?p=318, DBMによるテーブルデータベース その五} より、
社員名簿を作り検索する使用例である。

4名の社員を登録し、
@code{"name"} が @code{"空条"} で "始まる(@var{*QCSTRBW*})" 社員を検索し、
@code{"hdate"} で "降り順(@code{*QONUMDESC*})" に並び替える。

@example
(defun hash-table-to-key-value-list (hash-table)
  "@{key0: value0, key1: value1@} -> (key0 value0 key1 value1)"
  (loop for key being the hash-key using (hash-value value) of hash-table
      append (list key value)))

(defun alist-to-hash-table (alist &key ((:test test) 'eql))
  "((key0 . value0) (key1 . value1)) -> @{key0: value0, key1: value1@}"
  (let ((table (make-hash-table :test test)))
    (dolist (p alist)
      (setf (gethash (car p) table) (cdr p)))
    table))

(defvar *example-data* 
    `(("1"  . ,(alist-to-hash-table '(("name"   . "空条承太郎")
                                      ("sex"    . "male")
                                      ("hdate"  . "20050321")
                                      ("div"    . "brd,dev"))
                                    :test 'equal))
      ("81"  . ,(alist-to-hash-table '(("name"  . "東方仗助")
                                      ("sex"    . "male")
                                      ("hdate"  . "20060601")
                                      ("div"    . "dev"))
                                     :test 'equal))
      ("92"  . ,(alist-to-hash-table '(("name"  . "汐華初流乃")
                                      ("sex"    . "male")
                                      ("hdate"  . "20070311")
                                      ("div"    . "hr" ))
                                     :test 'equal))
      ("127" . ,(alist-to-hash-table '(("name"  . "空条徐倫")
                                       ("sex"   . "female")
                                       ("hdate" . "20070523")
                                       ("div"   . "brd,hr"))
                                     :test 'equal))))

(defun example (host port)
  (let ((tbl (make-instance 'RDBTBL)))
    (tt-open tbl host port)
    (tt-setindex tbl "name" *ITLEXICAL*)
    (loop for (k . v) in *example-data*
          do (tt-put tbl k v))
    (let ((qry (make-instance 'RDBQRY)))
      (tt-qry-initialize qry tbl)
      (tt-qry-addcond  qry "name" *QCSTRBW* "空条")
      (tt-qry-setorder qry "hdate" *QONUMDESC*)
      (prog1
        (let ((result (tt-qry-search qry)))
          (loop for key in result
                collect (hash-table-to-key-value-list (tt-get tbl key))))
        (tt-close tbl)))))
@end example
@end deftp

@defun tt-qry-initialize (rdbqry rdbtbl)
   Create a query object.

   @var{rdb} specifies the remote database object.

   The return value is the new query object.
@end defun

@defun tt-qry-addcond (rdbqry name op expr)
   Add a narrowing condition.

   @var{name} specifies the name of a column.  An empty string means the primary key.

   @var{op} specifies an operation type: @var{*QCSTREQ*} for string which is equal to the expression, @var{*QCSTRINC*} for string which is included in the expression, @var{*QCSTRBW*} for string which begins with the expression, @var{*QCSTREW*} for string which ends with the expression, @var{*QCSTRAND*} for string which includes all tokens in the expression, @var{*QCSTROR*} for string which includes at least one token in the expression, @var{*QCSTROREQ*} for string which is equal to at least one token in the expression, @var{*QCSTRRX*} for string which matches regular expressions of the expression, @var{*QCNUMEQ*} for number which is equal to the expression, @var{*QCNUMGT*} for number which is greater than the expression, @var{*QCNUMGE*} for number which is greater than or equal to the expression, @var{*QCNUMLT*} for number which is less than the expression, @var{*QCNUMLE*} for number which is less than or equal to the expression, @var{*QCNUMBT*} for number which is between two tokens of the expression, @var{*QCNUMOREQ*} for number which is equal to at least one token in the expression, @var{*QCFTSPH*} for full-text search with the phrase of the expression, @var{*QCFTSAND*} for full-text search with all tokens in the expression, @var{*QCFTSOR*} for full-text search with at least one token in the expression, @var{*QCFTSEX*} for full-text search with the compound expression.  All operations can be flagged by bitwise-or: @var{*QCNEGATE*} for negation, @var{*QCNOIDX*} for using no index.

   @var{expr} specifies an operand exression.

   The return value is always @code{nil}.
@end defun

@defun tt-qry-setorder (rdbqry name &optional (type *QOSTRASC*))
   Set the order of the result.

   @var{name} specifies the name of a column.  An empty string means the primary key.

   @var{type} specifies the order type: @var{*QOSTRASC*} for string ascending, @var{*QOSTRDESC*} for string descending, @var{*QONUMASC*} for number ascending, @var{*QONUMDESC*} for number descending.  If it is not defined, @var{*QOSTRASC*} is specified.

   The return value is always @code{nil}.
@end defun

@defun tt-qry-setlimit (rdbqry &optional (max -1) (skip -1))
   Set the maximum number of records of the result.

   @var{max} specifies the maximum number of records of the result.  If it is not defined or negative, no limit is specified.

   @var{skip} specifies the maximum number of records of the result.  If it is not defined or not more than 0, no record is skipped.

   The return value is always @code{nil}.
@end defun

@defun tt-qry-search (rdbqry)
   Execute the search.

   The return value is an array of the primary keys of the corresponding records.  This method does never fail.  It returns an empty array even if no record corresponds.
@end defun

@defun tt-qry-searchout (rdbqry)
   Remove each corresponding record.

   If successful, the return value is true, else, it is false.
@end defun

@defun tt-qry-searchget (rdbqry &optional (names nil))
   Get records corresponding to the search.

   @var{names} specifies an array of column names to be fetched.  An empty string means the primary key.  If it is not defined, every column is fetched.

   The return value is an array of column hashes of the corresponding records.  This method does never fail.  It returns an empty list even if no record corresponds.

   Due to the protocol restriction, this method can not handle records with binary columns including the '\0' chracter.
@end defun

@defun tt-qry-searchcount (rdbqry)
   Get the count of corresponding records.

   The return value is the count of corresponding records or 0 on failure.
@end defun

@defun tt-qry-metasearch (rdbqry others &optional (type *MSUNION*))
   Retrieve records with multiple query objects and get the set of the result.

   @var{others} specifies an array of the query objects except for the self object.

   @var{type} specifies a set operation type: @var{*MSUNION*} for the union set, @var{*MSISECT*} for the intersection set, @var{*MSDIFF*} for the difference set.  If it is not defined, @var{*MSUNION*} is specified.

   The return value is an array of the primary keys of the corresponding records.  This method does never fail.  It returns an empty array even if no record corresponds.

   If the first query object has the order setting, the result array is sorted by the order.
@end defun

@subsection RDBQRY クラス の 定数

@defvr {query condition} *QCSTREQ*
           0 "string is equal to"
@end defvr

@defvr {query condition} *QCSTRINC*
          1 "string is included in"
@end defvr

@defvr {query condition} *QCSTRBW*
           2 "string begins with"
@end defvr

@defvr {query condition} *QCSTREW*
           3 "string ends with"
@end defvr

@defvr {query condition} *QCSTRAND*
          4 "string includes all tokens in"
@end defvr

@defvr {query condition} *QCSTROR*
           5 "string includes at least one token in"
@end defvr

@defvr {query condition} *QCSTROREQ*
         6 "string is equal to at least one token in"
@end defvr

@defvr {query condition} *QCSTRRX*
           7 "string matches regular expressions of"
@end defvr

@defvr {query condition} *QCNUMEQ*
           8 "number is equal to"
@end defvr

@defvr {query condition} *QCNUMGT*
           9 "number is greater than"
@end defvr

@defvr {query condition} *QCNUMGE*
          10 "number is greater than or equal to"
@end defvr

@defvr {query condition} *QCNUMLT*
          11 "number is less than"
@end defvr

@defvr {query condition} *QCNUMLE*
          12 "number is less than or equal to"
@end defvr

@defvr {query condition} *QCNUMBT*
          13 "number is between two tokens of"
@end defvr

@defvr {query condition} *QCNUMOREQ*
       14 "number is equal to at least one token in"
@end defvr

@defvr {query condition} *QCFTSPH*
         15 "full-text search with the phrase of"
@end defvr

@defvr {query condition} *QCFTSAND*
        16 "full-text search with all tokens in"
@end defvr

@defvr {query condition} *QCFTSOR*
         17 "full-text search with at least one token in"
@end defvr

@defvr {query condition} *QCFTSEX*
         18 "full-text search with the compound expression of"
@end defvr

@defvr {query condition} *QCNEGATE*
(ash 1 24) "negation flag"
@end defvr

@defvr {query condition} *QCNOIDX*
 (ash 1 25) "no index flag"
@end defvr

@defvr {order type} *QOSTRASC*
         0 "string ascending"
@end defvr

@defvr {order type} *QOSTRDESC*
        1 "string descending"
@end defvr

@defvr {order type} *QONUMASC*
         2 "number ascending"
@end defvr

@defvr {order type} *QONUMDESC*
        3 "number descending"
@end defvr

@defvr {set operation type} *MSUNION*
          0 "union"
@end defvr

@defvr {set operation type} *MSISECT*
          1 "intersection"
@end defvr

@defvr {set operation type} *MSDIFF*
           2 "difference"
@end defvr

@appendix 索引
@printindex cp

@contents
@bye
